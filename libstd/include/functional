/// @file <functional>
/// @data 14/03/2014 17:02:55
/// @author Ambroise Leclerc
/// @brief Function objects.
//
// Copyright (c) 2014, Ambroise Leclerc
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//
//   * Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//   * Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in
//     the documentation and/or other materials provided with the
//     distribution.
//   * Neither the name of the copyright holders nor the names of
//     contributors may be used to endorse or promote products derived
//     from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'
//  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
//  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
//  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
//  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
//  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
//  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
//  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
//  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
//  POSSIBILITY OF SUCH DAMAGE.
#pragma once
#include "h/functional.h"
#include "h/functional_operators.h"
#include <libstd/include/type_traits>
#include <libstd/include/memory>

namespace ETLSTD {


template<typename T>
class reference_wrapper {
public:
    using type = T;

    /// Constructor : stores a reference to x.
    reference_wrapper(T& x) noexcept : data(addressof(x)) {}

    /// Move constructor : deleted, construction from a temporary object is not allowed.
    reference_wrapper(T&&) = delete;

    /// Copy constructor : stores a reference to other.get().
    reference_wrapper(const reference_wrapper<T>& other) noexcept : data(addressof(other.get())) {}

    operator T& () const noexcept { return *data; }
    T& get() const noexcept { return *data; }
    
    template<typename... Args> typename result_of<T&(Args&&...) >::type operator() (Args&&... args) const {
        return invoke(get(), forward<Args>(args)...);
    }
private:
    T* data;
};

template<typename T> reference_wrapper<T> ref(T& t) { return reference_wrapper<T>(t); }
template<typename T> reference_wrapper<T> ref(reference_wrapper<T> t) { return ref(t.get()); }
template<typename T> void ref(const T&&) = delete;
template<typename T> reference_wrapper<const T> cref(const T& t) { return reference_wrapper<const T>(t); }
template<typename T> reference_wrapper<const T> cref(reference_wrapper<T> t) { return cref(t.get()); }
template<typename T> void cref(const T&&) = delete;

namespace etlHelper {
    template<typename T> struct is_reference_wrapper : false_type {};
    template<typename U> struct is_reference_wrapper<reference_wrapper<U>> : true_type {};
    template<typename T> using is_reference_wrapper_v = typename is_reference_wrapper<T>::value;
} // namespace etlHelper

} // namespace ETLSTD

