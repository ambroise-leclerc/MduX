/// @file new
/// @data 06/03/2014 20:13:53
/// @author Ambroise Leclerc
/// @brief
//
// Copyright (c) 2014, Ambroise Leclerc
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//
//   * Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//   * Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in
//     the documentation and/or other materials provided with the
//     distribution.
//   * Neither the name of the copyright holders nor the names of
//     contributors may be used to endorse or promote products derived
//     from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'
//  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
//  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
//  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
//  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
//  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
//  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
//  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
//  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
//  POSSIBILITY OF SUCH DAMAGE.
#pragma once

#include <etl/freestore.h>

/// Allocates requested number of bytes.
/// @param[in] size number of bytes to allocate
/// @return pointer to allocated memory
void* operator new(std::size_t size){
  return etl::FreeStore::Allocate(size);
}

/// Deallocates memory space previously allocated by a matching operator new.
/// @param[in] pointer to the memory to deallocate
/// @return
void operator delete(void* ptr) {
  etl::FreeStore::Deallocate(ptr);
}

/// Allocates requested number of bytes.
/// @param[in] size number of bytes to allocate
/// @return pointer to allocated memory
void* operator new[](size_t size) {
  return etl::FreeStore::Allocate(size);
}

/// Deallocates memory space previously allocated by a matching operator new.
/// @param[in] pointer to the memory to deallocate
void operator delete[](void* ptr) {
  etl::FreeStore::Deallocate(ptr);
}

/// Placement new for allocating the object inside a given memory buffer.
/// @param[in] ptr pointer to a memory area to initialize the object at
void* operator new(size_t, void* const buf){
  return buf;
}
void* operator new[](size_t, void* const buf){
  return buf;
}

/// Placement delete called automatically on "placement new" failure.
void operator delete(void*, void* const){ }
void operator delete[](void*, void* const){ }

