/// @file vector
/// @data 17/04/2014 16:31:53
/// @author Ambroise Leclerc
/// @brief Vector container.
//
// Copyright (c) 2014, Ambroise Leclerc
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//
//   * Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//   * Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in
//     the documentation and/or other materials provided with the
//     distribution.
//   * Neither the name of the copyright holders nor the names of
//     contributors may be used to endorse or promote products derived
//     from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'
//  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
//  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
//  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
//  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
//  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
//  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
//  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
//  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
//  POSSIBILITY OF SUCH DAMAGE.
#pragma once
#include <libstd/include/memory>
#include <libstd/include/iterator>

#include <etl/ETLDevice.h>

namespace ETLSTD {
template<typename T, typename Allocator = allocator<T>>
class vector {
public:
    using value_type = T;
    using allocator_type = Allocator;
    using size_type = size_t;
    using difference_type = ptrdiff_t;
    using reference = value_type&;
    using const_reference = const value_type&;
    using pointer = typename allocator_traits<Allocator>::pointer;
    using const_pointer = typename allocator_traits<Allocator>::const_pointer;
    using iterator = T*;
    using const_iterator = const T*;
    using const_reverse_iterator = ETLSTD::reverse_iterator<const_iterator>;
    using reverse_iterator = ETLSTD::reverse_iterator<iterator>;

    // Constructors
    vector() : vector(Allocator()) {}
    explicit vector(const Allocator& alloc) : vector(etl::Device::defaultBufferSize, alloc) {}
    vector(size_type count, const T& value, const Allocator& alloc = Allocator())
        : allocator(alloc), bufferSize(etl::Device::defaultBufferSize + count), capacity(0), buffer(allocator.allocate(bufferSize)) {
        assign(bufferSize, value);
    }
    explicit vector(size_type count, const Allocator& alloc = Allocator())
        : allocator(alloc), bufferSize(count), capacity(0), buffer(allocator.allocate(bufferSize)) {}
    vector(const vector& other);
    vector(const vector& other, const Allocator& alloc);
    vector(vector&& other);
    vector(vector&& other, const Allocator& alloc);
    vector(initializer_list<T> init, const Allocator& alloc = Allocator());

    template<typename InputIt>
    vector(InputIt first, InputIt last, const Allocator& alloc = Allocator());

	template <class InputIterator>
	void assign(InputIterator first, InputIterator last) {
		
	}

	void assign(size_type n, const value_type& val) {
		resize(n);
	}

	void assign(initializer_list<value_type> il);

	void resize(size_type count) {
		reserve(count);
		bufferSize = count;
	}

	void resize(size_type count, const value_type& value);

	void reserve(size_type new_cap) {
		auto oldBuffer = move(buffer);
		buffer = make_unique<T>(new_cap);
		memcpy(buffer.get(), oldBuffer.get(), bufferSize);
		capacity = count;
	}

    // Capacity
    size_type size() const noexcept { return bufferSize; }

	
protected:
    Allocator allocator;
    size_type bufferSize;
    size_type capacity;
	unique_ptr<T> buffer;
};
} // namespace ETLSTD