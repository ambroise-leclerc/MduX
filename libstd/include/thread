/// @file thread
/// @data 13/06/2016 18:23:53
/// @author Ambroise Leclerc
/// @brief this header is part of the thread support library.
//
// Copyright (c) 2016, Ambroise Leclerc
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//
//   * Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//   * Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in
//     the documentation and/or other materials provided with the
//     distribution.
//   * Neither the name of the copyright holders nor the names of
//     contributors may be used to endorse or promote products derived
//     from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'
//  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
//  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
//  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
//  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
//  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
//  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
//  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
//  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
//  POSSIBILITY OF SUCH DAMAGE.
#pragma once

#include <libstd/include/chrono>
#include <etl/ioports.h>

namespace ETLSTD {
namespace this_thread {

/// Blocks the execution of the current thread for the specified constant sleepDuration with a 1 cycle resolution.
template<typename Rep, typename Period>
constexpr void sleep_for(const chrono::duration<Rep, Period>& sleepDuration) {
    etl::Device::delayTicks(chrono::duration_cast<etl::clock_cycles>(sleepDuration).count());
}


/// Blocks the execution of the current thread for the specified sleepDuration with a 1 millisecond resolution.
template<typename Rep, typename Period>
void sleep_for(chrono::duration<Rep, Period>& sleepDuration) {
	uint32_t nbMs = chrono::duration_cast<chrono::milliseconds>(sleepDuration).count();
	for (auto count = nbMs; count > 0; count--) {
		etl::Device::delayTicks(chrono::duration_cast<etl::clock_cycles>(1ms).count() - (64 / etl::Device::architectureWidth));
	}
}


} // namespace this_thread
} // namespace ETLSTD