name: MduX Medical Device UI Library CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  BUILD_TYPE: Release

jobs:
  # Windows Build with Vulkan
  windows-build:
    name: Windows (MSVC, Vulkan)
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      
    - name: Setup CMake (latest)
      uses: jwlawson/actions-setup-cmake@v2
      with:
        cmake-version: 'latest'
        
    - name: Setup Vulkan SDK
      uses: humbletim/setup-vulkan-sdk@v1.2.1
      with:
        vulkan-query-version: 1.3.204.0
        vulkan-components: Vulkan-Headers, Vulkan-Loader
        vulkan-use-cache: true
        
    - name: Verify Vulkan installation
      run: |
        echo "VK_SDK_PATH: $env:VULKAN_SDK"
        if (Test-Path "$env:VULKAN_SDK\bin\vulkaninfoSDK.exe") {
          & "$env:VULKAN_SDK\bin\vulkaninfoSDK.exe" --summary
        }
        
    - name: Configure CMake
      run: cmake -B build -S . -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DMDUX_BUILD_EXAMPLES=ON -DMDUX_BUILD_TESTS=ON -DMDUX_BUILD_DOCS=OFF
      
    - name: Build
      run: cmake --build build --config ${{ env.BUILD_TYPE }}
      
    - name: Run Tests
      run: ctest --test-dir build --build-config ${{ env.BUILD_TYPE }} --output-on-failure

  # Linux Build with Vulkan
  linux-build:
    name: Linux (GCC, Vulkan)
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      
    - name: Setup CMake (latest)
      uses: jwlawson/actions-setup-cmake@v2
      with:
        cmake-version: 'latest'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        # Add GCC 15 repository
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          gcc-15 \
          g++-15 \
          vulkan-tools \
          libvulkan-dev \
          vulkan-utility-libraries-dev \
          spirv-tools \
          libglfw3-dev \
          xvfb
          
    - name: Setup GCC 15
      run: |
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-15 60
        sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-15 60
        gcc --version
        g++ --version
        
    - name: Verify Vulkan installation
      run: |
        vulkaninfo --summary || echo "Vulkan driver not available (expected in CI)"
        
    - name: Configure CMake
      run: cmake -B build -S . -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DMDUX_BUILD_EXAMPLES=ON -DMDUX_BUILD_TESTS=ON -DMDUX_BUILD_DOCS=OFF
      
    - name: Build
      run: cmake --build build --config ${{ env.BUILD_TYPE }}
      
    - name: Run Tests
      run: |
        export DISPLAY=:99
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        ctest --test-dir build --build-config ${{ env.BUILD_TYPE }} --output-on-failure

  # Clang Build with Vulkan
  clang-build:
    name: Linux (Clang, Vulkan)
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      
    - name: Setup CMake (latest)
      uses: jwlawson/actions-setup-cmake@v2
      with:
        cmake-version: 'latest'
        
    - name: Install LLVM/Clang 20
      run: |
        sudo apt-get update
        wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
        sudo add-apt-repository "deb http://apt.llvm.org/noble/ llvm-toolchain-noble-20 main"
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          clang-20 \
          libc++-20-dev \
          libc++abi-20-dev \
          vulkan-tools \
          libvulkan-dev \
          vulkan-utility-libraries-dev \
          spirv-tools \
          libglfw3-dev \
          xvfb
          
    - name: Setup Clang 20
      run: |
        sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-20 60
        sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-20 60
        clang --version
        clang++ --version
        
    - name: Verify Vulkan installation
      run: |
        vulkaninfo --summary || echo "Vulkan driver not available (expected in CI)"
        
    - name: Configure CMake
      run: |
        export CC=clang-20
        export CXX=clang++-20
        cmake -B build -S . \
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
          -DCMAKE_C_COMPILER=clang-20 \
          -DCMAKE_CXX_COMPILER=clang++-20 \
          -DMDUX_BUILD_EXAMPLES=ON \
          -DMDUX_BUILD_TESTS=ON \
          -DMDUX_BUILD_DOCS=OFF
      
    - name: Build
      run: cmake --build build --config ${{ env.BUILD_TYPE }}
      
    - name: Run Tests
      run: |
        export DISPLAY=:99
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        ctest --test-dir build --build-config ${{ env.BUILD_TYPE }} --output-on-failure

  # Compliance and Documentation Build
  compliance-docs:
    name: Compliance & Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      
    - name: Setup CMake (latest)
      uses: jwlawson/actions-setup-cmake@v2
      with:
        cmake-version: 'latest'
        
    - name: Install dependencies
      run: |
        sudo apt-get update
        # Add GCC 15 repository  
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
        sudo apt-get update
        sudo apt-get install -y \
          doxygen \
          graphviz \
          gcc-15 \
          g++-15 \
          vulkan-tools \
          libvulkan-dev
          
    - name: Setup GCC 15
      run: |
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-15 60
        sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-15 60
        
    - name: Configure with regulatory documentation
      run: cmake -B build -S . -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DMDUX_BUILD_DOCS=ON -DMDUX_ENABLE_REGULATORY_DOCS=ON
      
    - name: Build documentation
      run: cmake --build build --target doxygen-docs
      
    - name: Upload documentation
      uses: actions/upload-artifact@v4
      with:
        name: medical-device-documentation
        path: build/html/
        retention-days: 30

  # Security and Code Quality
  security-analysis:
    name: Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      
    - name: Setup CMake (latest)
      uses: jwlawson/actions-setup-cmake@v2
      with:
        cmake-version: 'latest'
        
    - name: Install dependencies
      run: |
        sudo apt-get update
        # Add GCC 15 repository
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
        # Add LLVM repository for clang-tidy-20
        wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
        sudo add-apt-repository "deb http://apt.llvm.org/noble/ llvm-toolchain-noble-20 main"
        sudo apt-get update
        sudo apt-get install -y \
          gcc-15 \
          g++-15 \
          vulkan-tools \
          libvulkan-dev \
          cppcheck \
          clang-tidy-20
          
    - name: Run static analysis
      run: |
        # Static analysis with cppcheck
        cppcheck --enable=all --std=c++23 --suppress=missingInclude include/ examples/ tests/ || true
        
        # Configure for clang-tidy
        cmake -B build -S . -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DMDUX_BUILD_EXAMPLES=ON -DMDUX_BUILD_TESTS=ON
        
        # Run clang-tidy on key files
        clang-tidy-20 include/mdux/mdux.hpp -p build || true